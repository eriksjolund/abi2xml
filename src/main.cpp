/*******************************************************************************
 *                                                                             *
 *   Copyright (C) 2003  Erik Sjolund,  (<html>Erik Sj&ouml;lund</html>)       *
 *                       Center for Genomics and Bioinformatics,               *
 *                       Karolinska Institutet,                                *
 *                       Stockholm,                                            *
 *                       Sweden                                                *
 *                                                                             *
 *  Author: Erik Sjolund                                                       *
 *  Email: erik.sjolund@adivo.se                                               *
 *                                                                             *
 *  This program is free software; you can redistribute it and/or modify       *
 *  it under the terms of the GNU General Public License as published by       *
 *  the Free Software Foundation; either version 2 of the License, or          *
 *  (at your option) any later version.                                        *
 *                                                                             *
 *  This program is distributed in the hope that it will be useful,            *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              * 
 *  General Public License for more details.                                   *
 *                                                                             *
 *  You should have received a copy of the GNU General Public License          *
 *  along with this program; if not, write to the Free Software                *
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA  *
 *                                                                             *
 *******************************************************************************
 */
 
#include <QFile>
#include <QDataStream>
#include <QByteArray>
#include <QString>
#include <QTextStream>
#include <QTextCodec>
#include <QDir>
#include <QRegExp>

#include "gengetopt/cmdline.h"
#include "abi2xml.h"
#include "params.h"


void convert(QString ifile, QString ofile);

void convert(QString ifilename, QString ofilename, Params * params )
{  

  QFile ifile( ifilename );
  if ( ! ifile.open( QIODevice::ReadOnly ) )
  {
    qFatal( "could not open input file: %s\n",qPrintable(ifilename));
  }

  QDataStream stream( &ifile );  // read the data serialized from the file
  stream.setByteOrder( QDataStream::BigEndian );

  QDomDocument domDoc("Abi2xml");
  QString content("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
  domDoc.setContent(content);

  QString commentStr = QString(" This file was generated by abi2xml %2 ").arg( CMDLINE_PARSER_VERSION ); 
  QDomComment comment = domDoc.createComment( commentStr );
  domDoc.appendChild( comment ); 

  QDomElement rootElem = domDoc.createElement("root");
  domDoc.appendChild( rootElem );

  QDomElement abiFileElem = domDoc.createElement("abiFile");
  rootElem.appendChild( abiFileElem );
  abiFileElem.setAttribute("filename",ifilename);

  Abi2xml parser( stream, abiFileElem, params );
  parser.parse();

  QFile ofile( ofilename );
  if ( ! ofile.open( QIODevice::WriteOnly ) )
  {
    qFatal( "could not open output file: %s\n",qPrintable(ofilename));
  }

  QTextStream ostream( &ofile );  // read the data serialized from the file
  ostream.setCodec( QTextCodec::codecForName("UTF-8") );
  QString xml = domDoc.toString();
  ostream << xml << endl;
};


int main(int argc, char *argv[])
{
  /* Here we are using gengetopt to parse our command line arguments 
   * for more info see http://www.gnu.org/software/gengetopt/gengetopt.html 
   */

  gengetopt_args_info args_info;
  if (cmdline_parser (argc, argv, &args_info) != 0)
  {
    exit(1) ;
  }

  QTextCodec *codec;

  codec = QTextCodec::codecForName( args_info.input_encoding_arg );
  if ( ! codec )
  {
    QString allCodecs;
    QList<QByteArray> availableCodecs = QTextCodec::availableCodecs();
    for (int i = 0; i < availableCodecs.size(); ++i )
    {
      allCodecs.append( availableCodecs[i] ).append("\n");
    }
    qFatal("The QTextCodec class does not support the encoding \"%s\"\nThe available encodings are:\n %s", args_info.input_encoding_arg, qPrintable(allCodecs) );
  }
  Params params;
  params.codec = codec;
  params.int_vector_as_attribute = args_info.int_vector_as_attribute_given;

  if (( args_info.input_file_given || args_info.output_file_given ) &&
      ( args_info.input_dir_given || args_info.output_dir_given ))
  {
    qFatal("Use either the flag combination -i and -o or the combination -O and -I" );
  }  
  if ( args_info.input_dir_given && ! args_info.output_dir_given )
  {
    qFatal("The --input-dir flag requries the --output-dir flag");
  }
  if ( ! args_info.input_dir_given && args_info.output_dir_given )
  {
    qFatal("The --output-dir flag requries the --input-dir flag");
  }
  if ( args_info.input_dir_given && args_info.output_dir_given )
  {
    QDir d( args_info.input_dir_arg );
    d.setFilter( QDir::Files );
    QString suffix = QString( args_info.abi_file_suffix_arg );
    QRegExp rx( "\\W" ); /** matches any non-word-character **/ 
    if ( rx.indexIn( suffix ) != -1 )
    {
      qFatal("--abi-file-suffix can only contain letters, numbers and _");
    } 

    QStringList list = d.entryList( QStringList("*." + suffix) );
    for ( QStringList::Iterator it = list.begin(); it != list.end(); ++it ) {
      QString ofilename = *it;
      ofilename.truncate( ofilename.length() - suffix.length() );
      ofilename.append( "xml" );
      QString ifilename2 = QString( args_info.input_dir_arg ) + QDir::separator () + *it; 
      QString ofilename2 =  QString( args_info.output_dir_arg ) + QDir::separator () + ofilename;
      convert( ifilename2 , ofilename2 , &params );
    }
  }
  if ( args_info.input_file_given && ! args_info.output_file_given )
  {
    qFatal("The --input-file flag requries the --output-file flag");
  }
  if ( ! args_info.input_file_given && args_info.output_file_given )
  {
    qFatal("The --output-file flag requries the --input-file flag");
  }
  if ( args_info.input_file_given && args_info.output_file_given )
  {
    if ( args_info.abi_file_suffix_given )
    {
      qFatal("The flag --abi-file-suffix can not be used with --input-file");
    }
    convert( QString( args_info.input_file_arg ), QString( args_info.output_file_arg ) , &params );
  }
}

